;;; version 0.2.3
;;; https://mathworld.wolfram.com/PellEquation.html

(from math [isqrt
            floor])

(from fractions [Fraction])

(def solve-pell [d]
  (= sequence [])
  (= a0 (isqrt d))
  (= r 0)
  (= p a0)
  (= q (- d (** a0 2)))
  (while (!= (:= a (int (Fraction (+ a0 p) q)))
             (* 2 a0))
    (sequence.append a)
    (+= r 1)
    (= p (- (* a q) p))
    (= q (Fraction (- d (* p p)) q)))
  (sequence.append a)
  (= [p1 p2] [a0 (+ (* a0 (sub sequence 0)) 1)])
  (for i (range 2 (ife (% r 2) (+ r 1) (+ (* 2 r) 2)))
    (= [p1 p2] [p2 (+ (* (sub sequence (% (- i 1) (+ r 1))) p2) p1)]))
  (return p2))

(def solution [D]
  (= rst 0)
  (= mem 0)
  (for n (range 1 (+ (isqrt D) 1))
    (for d (range (+ 1 (* n n)) (min (+ D 1) (** (+ n 1) 2)))
      (if (>= (:= x (solve-pell d)) mem)
          (do (= mem x)
              (= rst d)))))
  (return rst))

(defmacro euler [*inputs]
  (return `(do (from time [time])
               (def main []
                 (= start (time))
                 (print (solution ~@inputs))
                 (print "elapsed:" (- (time) start)))
               (main))))

(euler 1000)
