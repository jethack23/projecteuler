;;; version 0.2.2

(from math [sqrt])

(def required-sum [x]
  (if (.is-integer (sqrt x))
      (return 0))
  (= left 1)
  (while (<= (** (+ left 1) 2) x)
    (+= left 1))
  (= top left)
  (= rst top)
  (for i (range 99)
    (-= x (* top left))
    (*= x 100)
    (+= left top)
    (*= left 10)
    (= top 0)
    (while (<= (* (+ top 1) (+ left top 1)) x)
      (+= top 1))
    (+= left top)
    (+= rst top))
  (return rst))

(def solution [n]
  (return (sum [(required-sum i) for i in (range 1 (+ n 1))])))

(defmacro euler [*inputs]
  (return `(do (from time [time])
               (def main []
                 (= start (time))
                 (print (solution ~@inputs))
                 (print "elapsed:" (- (time) start)))
               (main))))

(euler 100)
